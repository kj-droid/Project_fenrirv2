# fenrir/modules/vulnerability_scanner.py
import asyncio
import nvdlib
import nmap
from ..logging_config import log
from ..config import config

class VulnerabilityScanner:
    """
    Scans for known vulnerabilities by performing service detection and
    querying the National Vulnerability Database (NVD).
    """
    def __init__(self):
        log.debug("Vulnerability Scanner module initialized.")
        self.nvd_api_key = config.NVD_API_KEY

    async def get_service_version(self, target_ip: str, port: int) -> dict | None:
        """
        Uses nmap to get the service and version running on a specific port.
        """
        try:
            log.info(f"Performing service scan on {target_ip}:{port}...")
            # Run the synchronous nmap scan in a separate thread
            nm = await asyncio.to_thread(nmap.PortScanner)
            # -sV: Service/Version detection, -T4: Aggressive timing
            scan_args = '-sV -T4'
            nm.scan(hosts=target_ip, ports=str(port), arguments=scan_args)
            
            if target_ip in nm.all_hosts() and 'tcp' in nm[target_ip] and port in nm[target_ip]['tcp']:
                service_info = nm[target_ip]['tcp'][port]
                product = service_info.get('product', '')
                version = service_info.get('version', '')
                
                if product and version:
                    log.info(f"Detected: {product} version {version} on port {port}")
                    return {"product": product, "version": version}
        except Exception as e:
            log.error(f"Error during nmap service scan on {target_ip}:{port}: {e}")
        return None

    async def search_cves(self, service_info: dict):
        """
        Searches the NVD for CVEs matching a service and version.
        """
        product = service_info.get("product", "").lower()
        version = service_info.get("version", "")
        
        # Construct a search keyword. This often requires some trial and error.
        # Example: 'Apache httpd' -> 'apache:http_server'
        # We'll use a simple keyword search for this version.
        keyword = f"{product} {version}"
        log.info(f"Searching for CVEs matching '{keyword}'...")

        try:
            # Run the synchronous nvdlib call in a separate thread
            cves = await asyncio.to_thread(
                nvdlib.searchCVE,
                keywordSearch=keyword,
                key=self.nvd_api_key,
                limit=5 # Limit results to the top 5 for performance
            )

            if cves:
                log.warning(f"Found {len(cves)} potential vulnerabilities for {product} {version}:")
                for cve in cves:
                    # Get the CVSS v3 score if available, otherwise v2
                    score = cve.metrics.cvssMetricV31[0].cvssData.baseScore if cve.metrics.cvssMetricV31 else cve.metrics.cvssMetricV2[0].cvssData.baseScore
                    severity = cve.metrics.cvssMetricV31[0].cvssData.baseSeverity if cve.metrics.cvssMetricV31 else cve.metrics.cvssMetricV2[0].baseSeverity
                    
                    log.warning(f"  - {cve.id} (Score: {score} {severity})")
                    log.warning(f"    {cve.descriptions[0].value}")
            else:
                log.info(f"No CVEs found in the NVD for '{keyword}'.")

        except Exception as e:
            log.error(f"Failed to query NVD for '{keyword}': {e}")

    async def run(self, target_ip: str, open_ports: list[int]):
        """
        Runs the full vulnerability scan process.
        """
        log.info(f"Starting vulnerability scan on {target_ip} for {len(open_ports)} open port(s).")
        if not open_ports:
            log.warning("No open ports provided to vulnerability scanner. Skipping.")
            return

        # 1. Get service information for all open ports concurrently
        service_scan_tasks = [self.get_service_version(target_ip, port) for port in open_ports]
        detected_services = await asyncio.gather(*service_scan_tasks)
        
        # Filter out ports where no service was detected
        valid_services = [s for s in detected_services if s is not None]

        # 2. Search for CVEs for all detected services concurrently
        if valid_services:
            cve_search_tasks = [self.search_cves(service) for service in valid_services]
            await asyncio.gather(*cve_search_tasks)
        
        log.info("Vulnerability scan finished.")
